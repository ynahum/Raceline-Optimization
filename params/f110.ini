# As a general rule of thumb when the values are unknown, I set them to 1/10 of the `racecar.ini` parameters
# ----------------------------------------------------------------------------------------------------------------------
[GENERAL_OPTIONS]

### set name of ggv diagram and ax_max_machines files to use
ggv_file="ggv.csv"
ax_max_machines_file="ax_max_machines.csv"

### stepsize options
# stepsize_prep:               [m] used for linear interpolation before spline approximation
# stepsize_reg:                [m] used for spline interpolation after spline approximation (stepsize during opt.)
# stepsize_interp_after_opt:   [m] used for spline interpolation after optimization

# TODO: Modify these if solver too slow 
# 0.25, 0.75, 0.5
#0.5, 1.5, 1.0
stepsize_opts={"stepsize_prep": 0.1,
               "stepsize_reg": 0.3,
               "stepsize_interp_after_opt": 0.2}

### spline regression smooth options
# k_reg:                        [-] order of B-Splines -> standard: 3
# s_reg:                        [-] smoothing factor, range [1.0, 100.0]

reg_smooth_opts={"k_reg": 3,
                 "s_reg": 10}

### preview and review distances for numerical curvature calculation (used in minimum time optimization)
# d_preview_curv:               [m] preview distance (curvature)
# d_review_curv:                [m] review distance (curvature)
# d_preview_head:               [m] preview distance (heading)
# d_review_head:                [m] review distance (heading)

curv_calc_opts = {"d_preview_curv": 0.2,
                  "d_review_curv": 0.2,
                  "d_preview_head": 0.1,
                  "d_review_head": 0.1}

### general vehicle parameters required in several functions
# v_max:                        [m/s] maximal vehicle speed
# length:                       [m] vehicle length
# width:                        [m] vehicle width
# mass:                         [kg] vehicle mass
# dragcoeff:                    [kg*m2/m3] drag coefficient calculated by 0.5 * rho_air * c_w * A_front TODO:
# curvlim:                      [rad/m] curvature limit of the vehicle
# g:                            [N/kg] gravity acceleration

# See https://github.com/jainachin/bayesrace/blob/master/bayes_race/params/f110.py
veh_params = {"v_max": 22.88,
              "length": 0.5,
              "width": 0.27,
              "mass": 3.906,
              "dragcoeff": 0.075, 
              "curvlim": 1.782, 
              "g": 9.81}

# R_min = L / tan(Î´_max) = 0.324 / tan(0.5236) = 0.324 / 0.577 = 0.561 meters
# => curvlim = 1 / R_min = 1 / 0.561 = 1.782 m

### velocity profile calculation options
# dyn_model_exp:                [-] exponent used in the vehicle dynamics model (range [1.0, 2.0])
# vel_profile_conv_filt_window: [-] moving average filter window size for velocity profile (set null if not used)

vel_calc_opts = {"dyn_model_exp": 1.0,
                 "vel_profile_conv_filt_window": null}

# ----------------------------------------------------------------------------------------------------------------------
[OPTIMIZATION_OPTIONS]

### optimization problem options (shortest path optimization) ----------------------------------------------------------
# width_opt:                    [m] vehicle width for optimization including safety distance

optim_opts_shortest_path={"width_opt": 0.34}

### optimization problem options (minimum curvature optimization) ------------------------------------------------------
# width_opt:                    [m] vehicle width for optimization including safety distance
# iqp_iters_min:                [-] minimum number of iterations for the IQP
# iqp_curverror_allowed:        [rad/m] maximum allowed curvature error for the IQP

optim_opts_mincurv={"width_opt": 0.5,
                    "iqp_iters_min": 3,
                    "iqp_curverror_allowed": 0.01}

### optimization problem options (minimum lap time optimization) -------------------------------------------------------
# width_opt:                    [m] vehicle width for optimization including safety distance
# penalty_delta:                [-] penalty of delta derivative for improved smoothness of controls (range [0.0, 50.0])
# penalty_F:                    [-] penalty of F derivative for improved smoothness of controls (range [0.0, 2.0])
# mue:                          [-] constant friction coefficient (determines tire's D parameter of MF by D = F_z * mue)
# n_gauss                       [-] number of gaussian basis functions on each side (var_friction: "gauss")
# dn                            [m] distance of equidistant points on normal vectors for extracting friction
                                # coefficients (var_friction: "linear" or "gauss")
# limit_energy:                 [true/false] limit energy consumption
# energy_limit:                 [kWh/lap] energy consumption limit (limit_energy: true)
# safe_traj:                    [true/false] safe trajectories -> limit accelerations
# ax_pos_safe:                  [m/s2] a_x+ limit for safe trajectories (safe_traj: true) -> null if ggv should be used
# ax_neg_safe:                  [m/s2] a_x- limit for safe trajectories (safe_traj: true) -> null if ggv should be used
# ay_safe:                      [m/s2] a_y limit for safe trajectories (safe_traj: true) -> null if ggv should be used
# w_tr_reopt:                   [m] total track width in case of reoptimization using the IQP
# w_veh_reopt:                  [m] vehicle width in case of reoptimization using the IQP
# w_add_spl_regr:               [m] width added in case of reoptimization to compensate second spline regression
# step_non_reg:                 [-] defines how many points to be skipped per step during non-regular point sampling
#                               (dependent on curvature)
# eps_kappa:                    [rad/m] curvature threshold to skip discretization points on straights (if
#                               step_non_reg > 0)

optim_opts_mintime={"width_opt": 0.9,
                    "penalty_delta": 10.0,
                    "penalty_F": 0.01,
                    "mue": 0.3, 
                    "n_gauss": 5,
                    "dn": 0.25,
                    "limit_energy": false,
                    "energy_limit": 2.0,
                    "safe_traj": false,
                    "ax_pos_safe": null,
                    "ax_neg_safe": null,
                    "ay_safe": null,
                    "w_tr_reopt": 1.0,
                    "w_veh_reopt": 0.4,
                    "w_add_spl_regr": 0.2,
                    "step_non_reg": 0,
                    "eps_kappa": 1e-3}

### vehicle parameters (minimum lap time optimization)
# wheelbase_front:              [m] wheelbase front
# wheelbase_rear:               [m] wheelbase rear
# track_width_front:            [m] track width front
# track_width_rear:             [m] track width rear
# cog_z:                        [m] center of gravity
# I_z:                          [kgm^2] yaw inertia
# liftcoeff_front:              [kg*m2/m3] lift coefficient front axle calculated by 0.5 * rho_air * c_l_f * A_spoiler_f
# liftcoeff_rear:               [kg*m2/m3] lift coefficient rear axle calculated by 0.5 * rho_air * c_l_r * A_spoiler_r
# k_brake_front:                [-] portion of braking force at the front axle of the total braking force
# k_drive_front:                [-] portion of driving force at the front axle of the total driving force
# k_roll:                       [-] portion of roll moment at the front axle of the total roll moment
# t_delta:                      [s] time constant for steering dynamic
# t_drive:                      [s] time constant for acceleration dynamic
# t_brake:                      [s] time constant for braking dynamic
# power_max:                    [W] maximal engine power #TODO:
# f_drive_max:                  [N] maximal drive force #TODO:
# f_brake_max:                  [N] maximal brake force (only needed for actor dynamics) TODO:
# delta_max:                    [rad] maximal steer angle

vehicle_params_mintime = {"wheelbase_front": 0.275,
                          "wheelbase_rear": 0.275,
                          "track_width_front": 0.296,
                          "track_width_rear": 0.296,
                          "cog_z": 0.074,
                          "I_z": 0.04712,
                          "liftcoeff_front": 0.045,
                          "liftcoeff_rear": 0.075,
                          "k_brake_front": 0.6,
                          "k_drive_front": 0.5,
                          "k_roll": 0.5,
                          "t_delta": 0.2,
                          "t_drive": 0.1, 
                          "t_brake": 0.1, 
                          "power_max": 23000.0,
                          "f_drive_max": 700.0, 
                          "f_brake_max": 2000.0,
                          "delta_max": 0.4189}

### tire parameters (minimum lap time optimization)
# c_roll:                       [-] rolling resistance coefficient
# f_z0:                         [N] nominal normal force
# B_front:                      [-] Coefficient B for front tire
# C_front:                      [-] Coefficient C for front tire
# eps_front:                    [-] load dependence of Coefficient D for front tire
# E_front:                      [-] Coefficient E for front tire
# B_rear:                       [-] Coefficient B for rear tire
# C_rear:                       [-] Coefficient C for rear tire
# eps_rear:                     [-] load dependence of Coefficient D for rear tire
# E_rear:                       [-] Coefficient E for rear tire
# Hint: The D parameter of the Magic Formula is determined by D = F_z * mue. mue can be set above in optim_opts_mintime!

tire_params_mintime = {"c_roll": 0.013,
                       "f_z0": 300.0,
                       "B_front": 10.0,
                       "C_front": 2.5,
                       "eps_front": -0.1,
                       "E_front": 1.0,
                       "B_rear": 10.0,
                       "C_rear": 2.5,
                       "eps_rear": -0.1,
                       "E_rear": 1.0}

### powertrain behavior (minimum lap time optimization)
pwr_params_mintime = {"pwr_behavior": false}
